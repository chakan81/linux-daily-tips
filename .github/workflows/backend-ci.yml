name: Backend CI

# NOTE: Auto-triggers disabled until Week 2 (Backend development starts)
# Uncomment push/pull_request triggers after backend implementation begins
on:
  # push:
  #   branches: [ main, dev ]
  #   paths:
  #     - 'backend/**'
  #     - 'docker-compose.ci.yml'
  #     - '.github/workflows/backend-ci.yml'
  # pull_request:
  #   branches: [ main, dev ]
  #   paths:
  #     - 'backend/**'
  #     - 'docker-compose.ci.yml'
  #     - '.github/workflows/backend-ci.yml'
  workflow_dispatch:  # Manual trigger only

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  backend-quality:
    name: Backend Code Quality & Testing
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-backend-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-backend-

    - name: Build backend test image
      run: |
        docker-compose -f docker-compose.ci.yml build backend-test
        docker-compose -f docker-compose.ci.yml build backend-lint

    - name: Start test services (PostgreSQL & Redis)
      run: |
        docker-compose -f docker-compose.ci.yml up -d postgres-test redis-test

    - name: Wait for services to be ready
      run: |
        timeout 60 bash -c 'until docker-compose -f docker-compose.ci.yml exec -T postgres-test pg_isready -U postgres -d linux_daily_tips_test; do sleep 2; done'
        timeout 60 bash -c 'until docker-compose -f docker-compose.ci.yml exec -T redis-test redis-cli --raw incr ping; do sleep 2; done'

    - name: Run code formatting check (Black)
      run: docker-compose -f docker-compose.ci.yml run --rm backend-lint poetry run black --check .

    - name: Run import sorting check (isort)
      run: docker-compose -f docker-compose.ci.yml run --rm backend-lint poetry run isort --check-only .

    - name: Run linting (flake8)
      run: docker-compose -f docker-compose.ci.yml run --rm backend-lint poetry run flake8 .

    - name: Run type checking (mypy)
      run: docker-compose -f docker-compose.ci.yml run --rm backend-lint poetry run mypy .

    - name: Run tests with coverage
      run: |
        docker-compose -f docker-compose.ci.yml run --rm backend-test

    - name: Extract test coverage reports
      run: |
        mkdir -p ./coverage/backend
        docker cp $(docker-compose -f docker-compose.ci.yml ps -q backend-test):/app/coverage/coverage.xml ./coverage/backend/ || true
        docker cp $(docker-compose -f docker-compose.ci.yml ps -q backend-test):/app/coverage/html ./coverage/backend/ || true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Run security check
      run: docker-compose -f docker-compose.ci.yml run --rm backend-security || true

    - name: Clean up
      if: always()
      run: docker-compose -f docker-compose.ci.yml down -v

  backend-security-scan:
    name: Backend Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build backend image for security scan
      run: |
        docker build -t linux-tips-backend:latest ./backend

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'linux-tips-backend:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  backend-build-test:
    name: Backend Build Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test multi-stage build (development)
      run: |
        docker build --target development -t linux-tips-backend:dev ./backend

    - name: Test multi-stage build (testing)
      run: |
        docker build --target testing -t linux-tips-backend:test ./backend

    - name: Test multi-stage build (production)
      run: |
        docker build --target production -t linux-tips-backend:prod ./backend

    - name: Test production image startup
      run: |
        docker run -d --name test-backend \
          -e DATABASE_URL=sqlite:///./test.db \
          -e REDIS_URL=redis://localhost:6379/0 \
          -e ENVIRONMENT=production \
          linux-tips-backend:prod
        sleep 10
        docker logs test-backend
        docker stop test-backend
        docker rm test-backend